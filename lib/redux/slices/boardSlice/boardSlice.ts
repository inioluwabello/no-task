/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
import { getBoardsAsync, getBoardTasksAsync } from './thunks'

const initialState: BoardSliceState = {
  boards: [],
  tasks: [],
  status: 'idle',
}

export const boardSlice = createSlice({
  name: 'board',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setBoards: (state, action) => {
      state.boards = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // get all boards
      .addCase(getBoardsAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getBoardsAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.boards = action.payload
        try {
          state.selectedBoard = state.boards[0]
        } catch(e) {
          console.log(e)
        }
      })

      // Get tasks by board Id
      .addCase(getBoardTasksAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getBoardTasksAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.tasks = action.payload
      })
  },
})

/* Types */
export interface BoardSliceState {
  boards: IBoard[]
  selectedBoard?: IBoard
  tasks: ITask[]
  status: 'idle' | 'loading' | 'failed'
}

export interface IBoard {
  _id: string,
  title: string,
  statuses: string[]
}

export interface ITask {
  _id: string
  title: string
  description: string
  dueDate: Date
  priority: string
  status: string
  assignees: string[]
  comments: string[]
}